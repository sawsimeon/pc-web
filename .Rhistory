bio <- as.character(packages$Bioconductor)
library(RCurl)
x <- getURL("https://raw.githubusercontent.com/Rnewbie/OliFP/master/packages_to_be_install.csv")
packages <- read.csv(text=x, header = TRUE)
bio <- as.character(packages$Bioconductor)
source("http://bioconductor.org/biocLite.R")
biocLite(bio)
library(protr)
library(readxl)
library(Caret)
library(Biostrings)
library(RWeka)
library(dplyr)
library(e1071)
library(randomForest)
library(nnet)
library(caret)
library(Biostrings)
library(Rcpi)
source("http://bioconductor.org/biocLite.R")
biocLite("Rcpi")
library(Rcpi)
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
library(rJava)
library(Rhipe)
install.packages("Rhipe")
library(rJava)
library(RJSONIO)
library(itertools)
install.packages("itertools")
## try http if https is not available
source("https://bioconductor.org/biocLite.R")
biocLite("BioSeqClass")
library(GioSeqClass)
library(BioSeqClass)
?hr
?cdhitHR
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
data(iris)
library(rJava)
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME = "C:\\Program Files/Java/jre1.8.0_65/")
library(rJava)
130 - 1 - 62 - 35
# the value for B4 is:
130 - 32 - 35 - 34
# the value for C2 is:
130 - 62 - 35 - 2
# the value for c3 is:
130 - 36 - 31 - 33
# the value for D4 is:
130 - 1 - 35 - 30
# the value for A3 is:
130 - 61 - 2 - 64
# the value for A4 is:
date()
# the value for A4 is:
130 - 1 - 62 - 63
# isolate a signal column within a dataset using the varialbe$column notation.
#display the contents of the Soldiers column from the soldiersByCity variable
newvec = 25:45
## Make a single time-series for annual, quarterly, and monthly data
ts(newvec, start = 1965)  # annual
ts(newvec, start = 2965, frequency = 4)
ts(newvec, start = 1965, frequency = 12) # monthly
## Make a matrix
mat = matrix(1:60, nrow = 12)
# Make a multiple time-series object, monthly data
ts(mat, start = 1955, frequency = 12)
## New logical vector
vector(mode = "logical", length = 3)
## New numeric vector
vector(mode = "numeric", length = 3)
## New character vector
vector(mode = "character", length = 3)
## New list object
vector(mode = "list", length = 3)
## Make simple data vector
sample = c(1.2, 2.4, 3.1, 4, 2.7)
## Make into integer valeus
as.integer(sample)
## Make into characters
as.character(sample)
as.list(sample)
## Make a matrix of numbers
matdata = matrix(1:12, ncol = 4)
## Coerce to a table
as.table(matdata)
library(rJava)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
library(rjava)
library(rJava)
Sys.setenv(JAVA_HOME)
library(rJava)
library(RWeka)
library(rJava)
library(rJava)
library(rJava)
library(protr)
library(rJava)
system("java -version")
library(BioSeqClass)
aa.index
View(aa.index)
str(aa.index)
library(rJava)
######## Classification for Acetalcholinesterase
read_file <- function(x){
library(caret)
library(data.table)
#data <- read.csv(file = x, header = TRUE)
data <- fread(x)
IC50_nm <- data$IC50
IC50 <- as.numeric(IC50_nm)*10^-9
pIC50 <- -log10(IC50)
data <- as.data.frame(data)
descriptors <- data[, 2:ncol(data)]
set.seed(1)
filtered_descriptors <- descriptors[, -nearZeroVar(descriptors)]
Activity <- ifelse(pIC50 > 6, "Active",
ifelse((pIC50 <= 6) & (pIC50 < 5), "Inactive",
"Intermediate"))
Activity <- data.frame(Activity)
filtered_data_pre <- cbind(Activity, filtered_descriptors)
Active <- subset(filtered_data_pre, Activity == "Active")
Inactive <- subset(filtered_data_pre, Activity == "Inactive")
filtered_data <- rbind(Active, Inactive)
filtered_data <- filtered_data[!duplicated(filtered_data), ]
filtered_data$Activity <- factor(filtered_data$Activity, labels = c("Active", "Inactive"))
Activity <- filtered_data$Activity
yes <- filtered_data[, 2:ncol(filtered_data)]
raw <- cor(yes)
raw_2 <- raw[1:ncol(raw), 1:ncol(raw)]
high <- findCorrelation(raw_2, cutoff = 0.7)
filtered_descriptors <- yes[, -high]
final_data <- cbind(Activity, filtered_descriptors)
return(final_data)
}
library(devtools)
install_bitbucket("Grantlab/bio3d", subdir = "ver_devel/bio3d/")
library(bio3d)
help(package=bio3d)
help.search("pdb")
pdb <- read.pdb("1gfl")
pdb
attribues(pdb)
attributes(pdb)
head(pdb$atom)
pdb$atom[1:2,]
pdb$atom[1:2, c("eleno", "elety", "x", "y", "z")]
pdb$atom[1:2]
pdb$atom$elety[1:2]
plot.bio3d(pdb$atom$b[pdb$calpha], sse = pdb, typ = "l", ylab = "B-factor")
pdb$xyz
dim(pdb$xyz)
pdb$xyz[1, atom2xyz(1:20)]
# Select all C-alph atoms (return their indices)
ca.inds <- atom.select(pdb, "calpha")
ca.inds
head(pdb$atom[ca.inds$atom, ])
head(pdb$xyz[, ca.inds$xyz])
#Select chain A
a.inds <- atom.select(pdb, chain = "A")
# Select C-alphas of chain A
ca.inds <- atom.select(pdb, "calpha", chain = "A")
# We can combine multiple selection criteria to return their interaction
cab.inds <- atom.select(pdb, elety = c("CA", "CB"), chain = "A", resno = 10:20)
# Select all atoms except waters
nowat.inds <- atom.select(pdb, "water", inverse = TRUE)
# Select protein + GDP
sele <- atom.select(pdb, "protein", resid = "GDP", operator = "OR")
sele <- atom.select(pdb, "protein", resid = "GDP", operator = "OR")
sele
sele <- atom.select(pdb, "protein", elety = c("N", "CA", "C"), resno = 50:60, verbose = T)
a.inds <- atom.select(pdb, "protein")
b.inds <- atom.select(pdb, resid = "GDP")
sele <- combine.select(a.inds, b.inds, operator = "OR")
aa3 <- pdb$atom$resid[atom.select(pdb, "calpha")$atom]
head(aa3)
aa321(aa3)
head(pdbseq(pdb))
pdbs <- pdbaln(c("4121", "521p"), fit = TRUE)
pdbs <- pdbaln(c("1ema", "1gfl"), fit = TRUE)
deom("pdb")
demo("pdb")
::
""
demo("pca")
demo("md")
library(parallel)
# Spawn child processes using fork() on the local machine
cl <- makeForkCluster(getOption("cl.cores", 2))
# Use parLapply to calculate lengths of 1000 strings
text = rep("Hello, world!", 1000)
len = parLapply(cl, text, nchar)
# Kill child processes since they are no longer needed
stopCluster(cl)
library(parallel)
cl <- makePSOCKcluster(4)
setDefaultCluster(cl)
adder <- function(a, b) a + b
clusterExport(NULL, c('adder'))
parLapply(NULL, 1:8, function(z) adder(z, 100))
stopCluster(cl)
library(RSelenium)
# startServer() # start Selenium Server if needed
remDr <- remoteDriver()
remDr$open(silent = TRUE)
remDr$navigate("http://www.nngroup.com/articles/checkboxes-vs-radio-buttons/")
webElem <- remDr$findElement("id", "three")
install.packages("RSelenium")
library(RSelenium)
# startServer() # start Selenium Server if needed
remDr <- remoteDriver()
remDr$open(silent = TRUE)
remDr$navigate("http://www.nngroup.com/articles/checkboxes-vs-radio-buttons/")
webElem <- remDr$findElement("id", "three")
library(RSelenium)
remDr <- remoteDriver()
remDr$open()
RSelenium::checkForServer()
RSelenium::startServer()
require(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4444
, browserName = "firefox"
)
remDr$open()
remDr$getStatus()
remDr$navigate("http://www.google.com")
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4444
, browserName = "firefox"
)
remDr$navigate("http://www.google.com")
remDr$open()
remDr$navigate("http://www.google.com")
RSelenium::startServer()
require(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4444
, browserName = "firefox"
)
remDr$open()
unlink(system.file("bin", package = "RSelenium"), recursive = T)
checkForServer()
require(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4444
, browserName = "firefox"
)
remDr$open()
remDr$getStatus()
remDr$navigate("http://www.google.com")
unlink(system.file("bin", package = "RSelenium"), recursive = T)
checkForServer()
library(RSelenium)
checkForServer(update = TRUE)
remDr <- remoteDriver()
startServer()
ermDr$Open()
remDr$Open()
library(RSelenium)
checkForServer(update = TRUE)
devtools::install_github("ropensci/RSelenium")
RSelenium::checkForServer()
RSelenium::startServer()
require(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4444
, browserName = "firefox"
)
remDr$open()
shiny::runApp('C:/Users/Saw/Desktop/pc-web')
shiny::runApp('C:/Users/Saw/Desktop/pc-web')
setwd("C:/Users/Saw/Desktop/pc-web")
shiny::runApp()
<em>...</em>
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
<em>...</em>
<em>...</em>
<em>...</em>
<em>...</em>
<em>...</em>
<em>...</em>
<em>...</em>
shiny::runApp()
shiny::runApp()
